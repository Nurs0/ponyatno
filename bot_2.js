import TelegramBot from 'node-telegram-bot-api';
import { sendURLToRabbitMq, connectToRabbitMQ } from './src/publisher.js';
import { createConsumer, runConsumer, createConsumerInfo } from './src/consumer.js';
import { EXCHANGE_RETURN_KEY, QUEUE_NAME, QUEUE_RETURN_NAME } from './src/consts.js';
import { TgOnMessageHandler } from './src/handlers.js';
import { createTables } from './src/repos.js';
import { SQLiteConnector } from './src/db.js';

let numberRobuxes = 0
const db = new SQLiteConnector("./database.db")
const bot = new TelegramBot("6027789742:AAH4q7PY4ixWWoFPcIVWWOGrzHHlQLBH2-E", { polling: true });
const AMQP_URL = "amqp://user:password@localhost:5672/test?heartbeat=0"

try {
    db.connect()
    createTables(db)
    connectToRabbitMQ(AMQP_URL, QUEUE_NAME)
    createConsumer(AMQP_URL, createConsumerInfo(QUEUE_RETURN_NAME, EXCHANGE_RETURN_KEY), TgOnMessageHandler(bot)).then(() => {
        runConsumer()
    })
} catch (err) {
    console.error(err)
}

let chatState = {};
let transfer_count = {};
let urls = {};
let Dividednumber;
let payment;
let vivodNumber;
let specialUserId
let costnumber


function isValidHttpUrl(string) {
    try {
        const newUrl = new URL(string);
        return newUrl.protocol === 'http:' || newUrl.protocol === 'https:';
    } catch (err) {
        return false;
    }
}

bot.on("callback_query", (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    const messageId = callbackQuery.message.message_id;
    if (data === "buyRobux") {
        const message = `üí∏ –ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–±—É–∫—Å–æ–≤ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –∫—É–ø–∏—Ç—å?\n‚úÖ [–ö—É—Ä—Å —Ä–æ–±—É–∫—Å–æ–≤: 1 —Ä—É–± - 1.9 —Ä–æ–±—É–∫—Å]`;
        bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
                            callback_data: "backToMenu"
                        }
                    ]
                ]
            }
        });
        chatState[chatId] = "waitMoneyAmount"
    } else if (data === "calculator") {
        bot.editMessageText("üßÆ –≠—Ç–æ - –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä, –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–æ–±—É–∫—Å–æ–≤, –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—É–º–º—ã –≥–µ–π–º–ø–∞—Å—Å–∞!\n‚úÖ [–ö—É—Ä—Å —Ä–æ–±—É–∫—Å–æ–≤ -> 1 —Ä—É–± - 1.9 —Ä–æ–±—É–∫—Å–∞]\n", {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–π–º–ø–∞—Å—Å–∞",
                            callback_data: "gamepassCostCalculator",
                        }
                    ],
                    [
                        {
                            text: "–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–æ–±—É–∫—Å–æ–≤",
                            callback_data: "robuxCostCalculator",
                        }
                    ],
                    [
                        {
                            text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
                            callback_data: "backToMenu",
                        }
                    ]
                ]
            }
        })
    } else if (data === "giveaway") {
        const userId = callbackQuery.from.id;
        db.get(`SELECT userBalance FROM users WHERE userId = ?`, [userId], function (err, row) {
            if (err) {
                return console.error(err.message);
            }
            const balance = row ? row.userBalance : 0;
            bot.editMessageText(`üí∏ –í–∞—à —Ç–µ–∫—É—é—â–∏–π –±–∞–ª–∞–Ω—Å —Ä–æ–±—É–∫—Å–æ–≤: ${balance}\n‚ùì –°–∫–æ–ª—å–∫–æ —Ä–æ–±—É–∫—Å–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏?`, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
                                callback_data: "backToMenu"
                            }
                        ]
                    ]
                }
            })
            chatState[chatId] = "vivodMoney"
        })

    } else if (data === "profile") {
        const userId = callbackQuery.from.id;
        db.get(`SELECT userBalance FROM users WHERE userId = ?`, [userId], function (err, row) {
            if (err) {
                return console.error(err.message);
            }
            const balance = row ? row.userBalance : 0;
            const profile = `
üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å: 
üÜî –í–∞—à –∞–π–¥–∏ - ${chatId}
üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å - ${balance} —Ä–æ–±—É–∫—Å–æ–≤
        `
            bot.editMessageText(profile, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
                                callback_data: "buyRobux"
                            }
                        ],
                        [
                            {
                                text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
                                callback_data: "backToMenu"
                            }
                        ]
                    ]
                }
            })
        })

    } else if (data === "balance") {
        const userId = callbackQuery.from.id;
        db.get(`SELECT userBalance FROM users WHERE userId = ?`, [userId], function (err, row) {
            if (err) {
                return console.error(err.message);
            }
            const balance = row ? row.userBalance : 0;
            bot.editMessageText(`‚òÅÔ∏è –í–∞—à —Ç–µ–∫—É—é—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance} —Ä–æ–±—É–∫—Å–æ–≤\n ‚úîÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ –∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ:`, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
                                callback_data: "buyRobux"
                            }
                        ],
                        [
                            {
                                text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
                                callback_data: "backToMenu"
                            }
                        ]
                    ]
                }
            })
        })

    } else if (data === "newsChanel") {
        bot.editMessageText(`‚úÖ –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ:`, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "–ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª",
                            url: "t.me/cloudrobux"
                        }
                    ],
                    [
                        {
                            text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
                            callback_data: "backToMenu"
                        }
                    ]
                ]
            }
        })
    } else if (data === "helpAdmin") {
        bot.editMessageText(`üòä –ù–∞—à–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ, 24/7. \n‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º–∏.`, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "–¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
                            url: "t.me/DeluxeryOwner"
                        }
                    ],
                    [
                        {
                            text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
                            callback_data: "backToMenu"
                        }
                    ]
                ]
            }
        })
    } else if (data === "backToMenu") {
        const message = "–í–æ—Ç –º–æ–µ –º–µ–Ω—é:";
        chatState[chatId] = "userState"
        bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "üë§ –ü—Ä–æ—Ñ–∏–ª—å üë§",
                            callback_data: "profile"
                        }
                    ],
                    [
                        {
                            text: "üõçÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
                            callback_data: "instruction"
                        },
                        {
                            text: "–ù–∞–ª–∏—á–∏–µ ü§ë",
                            callback_data: "proverkaRBX"
                        }
                    ],
                    [
                        {
                            text: "üí≥ –ö—É–ø–∏—Ç—å Robux",
                            callback_data: "buyRobux"
                        },
                        {
                            text: "–í—ã–≤–µ—Å—Ç–∏ Robux üéÅ",
                            callback_data: "giveaway"
                        }
                    ],
                    [
                        {
                            text: "üí∞ –ë–∞–ª–∞–Ω—Å",
                            callback_data: "balance"
                        },
                        {
                            text: '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä üßÆ',
                            callback_data: "calculator"
                        }
                    ],
                    [
                        {
                            text: "‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
                            callback_data: "helpAdmin"
                        },
                        {
                            text: "–ù–æ–≤–æ—Å—Ç–∏ üì¢",
                            callback_data: "newsChanel"
                        }
                    ]
                ]
            }
        })
    } else if (data === "paySberbank") {
        payment = "–°–±–µ—Ä–±–∞–Ω–∫"
        bot.editMessageText(`
–°–±–µ—Ä üíö

–ö–∞—Ä—Ç–∞ - 2202206712973333
–ù–æ–º–µ—Ä - +79524452938 

‚ùóÔ∏è–†–∞–±–æ—Ç–∞–µ—Ç –°–ë–ü üíû
        `, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "–Ø –æ–ø–ª–∞—Ç–∏–ª",
                            callback_data: "userOplatil"
                        }
                    ],
                    [
                        {
                            text: "–ù–∞–∑–∞–¥",
                            callback_data: "buyRobux"
                        }
                    ]
                ]
            }
        })
    } else if (data === "payQIWI") {
        payment = "–ö–∏–≤–∏"
        bot.editMessageText(`
–ö–∏–≤–∏ ü•ù - 
–ö–∞—Ä—Ç–∞ - 4890494791238728 
–ù–æ–º–µ—Ä - +79049264285 

‚ùóÔ∏è–†–∞–±–æ—Ç–∞–µ—Ç –°–ë–ü üíû
        `, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "–Ø –æ–ø–ª–∞—Ç–∏–ª",
                            callback_data: "userOplatil"
                        }
                    ],
                    [
                        {
                            text: "–ù–∞–∑–∞–¥",
                            callback_data: "buyRobux"
                        }
                    ]
                ]
            }
        })
    } else if (data === "userOplatil") {
        bot.editMessageText(`‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! \n‚è∞ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–∏ 3-—Ö —á–∞—Å–æ–≤!`, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
                            callback_data: "backToMenu"
                        }
                    ]
                ]
            }
        })
        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "–ü–æ–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ–π –¥—É—Ä–µ –±–∞–ª–∞–Ω—Å", callback_data: "avtoPopolnenyieDlyaZayavka"
                        }
                    ]
                ]
            }
        }
        bot.sendMessage(-946513065, `–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}, –Ω–∞ —Å—É–º–º—É ${Dividednumber} —Ä—É–±–ª–µ–π!\n–û–ø–ª–∞—Ç–∞ –±—ã–ª–∞ —Å–¥–µ–ª–∞–Ω–∞ —á–µ—Ä–µ–∑ ${payment}`, keyboard)
        specialUserId = chatId
        return specialUserId
    } else if (data === "gamepassCostCalculator") {
        bot.editMessageText("‚úÖ –ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å, –∞ —è –≤—ã—Å—á–∏—Ç–∞—é —Å–∫–æ–ª—å–∫–æ –¥–æ–ª–∂–µ–Ω —Å—Ç–æ–∏—Ç—å –≥–µ–π–º–ø–∞—Å—Å!", {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
                            callback_data: "calculator"
                        }
                    ]
                ]
            }
        })
        chatState[chatId] = "gamepassCostCalculator"
    } else if (data === "robuxCostCalculator") {
        bot.editMessageText("‚úÖ –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–±—É–∫—Å–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å, –∞ —è –≤—ã—Å—á–∏—Ç–∞—é —Å–∫–æ–ª—å–∫–æ –≤—ã –¥–æ–ª–∂–Ω—ã –±—É–¥–µ—Ç–µ –∑–∞–ø–ª–∞—Ç–∏—Ç—å —Ä—É–±–ª–µ–π!", {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
                            callback_data: "calculator"
                        }
                    ]
                ]
            }
        })
        chatState[chatId] = "robuxCostCalculator"
    } else if (data === "vivodDa") {
        bot.editMessageText(`–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –≤—ã–≤–æ–¥–∏—Ç—å ${vivodNumber} —Ä–æ–±—É–∫—Å–æ–≤! \n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥–µ–π–º–ø–∞—Å—Å:`, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
                            callback_data: "backToMenu"
                        }
                    ]
                ]
            }
        })
        chatState[chatId] = "linkwait"
        console.log(chatState[chatId])

    } else if (data === "otmenaPayment") {
        bot.editMessageText(`–æ—Ç–º–µ–Ω–∏–ª–∞—Å—å –ø–æ–∫—É–ø–∫–∞`, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
                            callback_data: "backToMenu"
                        }
                    ]
                ]
            }
        })
        chatState[chatId] = "linkwait2"
        console.log(chatState[chatId])
    } else if (data === "avtoPopolnenyieDlyaZayavka") {
        function increaseUserBalance(userId, amount, callback) {
            db.execute(
                `UPDATE users SET userBalance = userBalance + ? WHERE userId = ?`,
                [amount, userId],
                function (err) {
                    if (err) {
                        console.error(err.message);
                        callback({ success: false });
                    } else {
                        callback({ success: true });
                    }
                }
            );
        }
        const adminUserId = 809124390
        const targetUserId = specialUserId
        const amount = Math.round(Dividednumber * 1.9)
        if (isAdminUser(adminUserId)) {
            // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            increaseUserBalance(targetUserId, amount, (result) => {
                if (result.success) {
                    bot.sendMessage(chatId, `–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${targetUserId} —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${amount}`);
                    bot.sendMessage(targetUserId, `–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ - ${amount} —Ä–æ–±—É–∫—Å–æ–≤`)
                } else {
                    bot.sendMessage(chatId, `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${targetUserId}`);
                }
            });
        } else {
            bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã");
        }
    } else if (data === "proverkaRBX") {
        bot.sendMessage(chatId, `–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞–ª–∏—á–∏–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: ${numberRobuxes} —Ä–æ–±—É–∫—Å–æ–≤!`)
    } else if (data === "instruction") {
        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
                            callback_data: "backToMenu"
                        }
                    ],
                    [
                        {
                            text: "–¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
                            callback_data: "helpAdmin"
                        }
                    ]
                ]
            }
        }
        bot.sendMessage(chatId,
            `
        –ì–∞–π–¥ #1 
        ‚ú®–¢–µ–º–∞: –°–æ–∑–¥–∞–Ω–∏–µ GamePass –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏. 
        
        ‚òÅÔ∏è–î–∞–Ω–Ω—ã–π –≥–∞–π–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω –ø–æ —à–∞–≥–∞–º, —Å–æ–≤–µ—Ç—É–µ–º —Å–ª–µ–¥–æ–≤–∞—Ç—å –∏–º. 
        
        ‚ö†Ô∏è –ò —Ç–∞–∫ –Ω–∞—á–Ω–µ–º , –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –±—Ä–∞—É–∑–µ—Ä, –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –Ø–Ω–¥–µ–∫—Å. 
        
        1. –ó–∞—Ö–æ–¥–∏–º –Ω–∞ —Å–∞–π—Ç Roblox 
        2. –í –±—Ä–∞—É–∑–µ—Ä–µ –Ω–∞–∂–∏–º–∞–µ–º ¬´–í–µ—Ä—Å–∏—è –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞¬ª 
        3. –ù–∞–∂–∏–º–∞–µ–º Create 
        4. –ù–∞–∂–∏–º–∞–µ–º Manage my games 
        5. –í–∞—Å –±—Ä–æ—Å–∏—Ç –Ω–∞ –≤–∫–ª–∞–¥–∫—É –≤–∞—à–∏ —Ä–µ–∂–∏–º—ã, —Ç–∞–º –Ω–∞–∂–∏–º–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—ã–π —Ä–µ–∂–∏–º (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ) 
        6. –í–≤–µ—Ä—Ö—É –Ω–∞–∂–∏–º–∞–µ–º –Ω–∞ 3 –ø–æ–ª–æ—Å–∫–∏. 
        7. –ò—â–µ–º –≤–∫–ª–∞–¥–∫—É Associated items –∏ –Ω–∞–∂–∏–º–∞–µ–º —Ç—É–¥–∞.
        8. –ò—â–µ–º –≤–∫–ª–∞–¥–∫—É Passes –∏ –Ω–∞–∂–∏–º–∞–µ–º –Ω–∞ Create Pass 
        9. –°–æ–∑–¥–∞–µ–º GamePass –∏ –∂–º–µ–º –Ω–∞ 3 –ø–æ–ª–æ—Å–∫–∏. 
        10. –í—ã–±–∏—Ä–∞–µ–º sales
        11. –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ on sale –∏ —Å—Ç–∞–≤–∏–º —Ü–µ–Ω—É (—á—Ç–æ –±—ã –ø—Ä–∏—à–ª–æ 700 —Å—Ç–∞–≤–∏–º 1000) 
        
        ‚úîÔ∏èGamePass —Å–¥–µ–ª–∞–Ω‚úîÔ∏è
        
        ‚ùì–û—Ç–∫—É–¥–∞ –≤–∑—è—Ç—å —Å—Å—ã–ª–∫—É ? 
        
        1. –ó–∞—Ö–æ–¥–∏–º –Ω–∞ —Å–∞–π—Ç Roblox 
        2. –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –≤–∫–ª–∞–¥–∫—É Profile 
        3. –õ–∏—Å—Ç–∞–µ–º —á—É—Ç–æ—á–∫—É –≤ –Ω–∏–∑ –∏ –∂–º–µ–º Creations 
        4. –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ —Ä–µ–∂–∏–º –≥–¥–µ —Å–æ–∑–¥–∞–ª–∏ GamePass 
        5. –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ —Å–∞–º GamePass 
        6. –ö–æ–ø–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –Ω–∞ –≤–∏–¥–µ–æ (–µ—Å–ª–∏ —É –≤–∞—Å –Ø–Ω–¥–µ–∫—Å). 
        
        ‚ö†Ô∏è–í–ê–ñ–ù–û‚ö†Ô∏è
        –£ –Ω–∞—Å –µ—Å—Ç—å —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –∫–æ—Ç–æ—Ä–∞—è —Å —Ä–∞–¥–æ—Å—Ç—å—é –≤–∞–º –ø–æ–º–æ–∂–µ—Ç –µ—Å–ª–∏ –≤—ã –Ω–µ –ø–æ–Ω—è–ª–∏ –∫–∞–∫ –≤—Å–µ —Ç–∞–∫–∏ —Å–¥–µ–ª–∞—Ç—å GamePass. –ú—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é –æ–±—ä—è—Å–Ω–∏–º –≤–∞–º –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å.
        `, keyboard)
    }
})

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id
    const url = msg.text;

    if (msg.text === "–í—ã–∑–≤–∞—Ç—å –º–µ–Ω—é") {
        bot.sendMessage(chatId, "–í–æ—Ç –º–æ–µ –º–µ–Ω—é:", Keyboard)
    } else if (chatState[chatId] === "TRANSFER_INPUT") {
        let number = parseInt(msg.text)
        if (number === NaN) {
            await bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≤–∏–¥–µ —Ü–∏—Ñ–µ—Ä!")
            return
        }
        db.execute("SELECT userBalance FROM users WHERE userId = ?", [userId], async (err, row) => {
            if (err) {
                console.error(err)
                return
            }
            if (!row) {
                console.log("User not found with %d", userId)
                return
            }

            if (row.userBalance - number < 0) {
                await bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
                chatState[chatId] = ""
                return
            }

            transfer_count[chatId] = number
            // db.execute( 
            //     `INSERT INTO transactions(name, url, user_id, price) VALUES (?, ?, ?, ?) RETURNING *`
            // , "vivod_sredstv",)

            chatState[chatId] = "URL_INPUT"
            await bot.sendMessage(chatId, `‚òÅ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ ${transfer_count[chatId]} —Ä–æ–±—É–∫—Å–æ–≤.\nü§ç –ì–µ–π–º–ø–∞—Å—Å –¥–æ–ª–∂–µ–Ω —Å—Ç–æ–∏—Ç—å ${transfer_count[chatId] * 1.43}\nüòä –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥–µ–π–º–ø–∞—Å—Å:`)
        })


    } else if (chatState[chatId] === "URL_INPUT") {
        if (!isValidHttpUrl(msg.text)) {
            const keyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: "–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É",
                                callback_data: "backToMenu"
                            }
                        ]
                    ]
                }
            }
            await bot.sendMessage(chatId, `‚ùó –í–∞—à–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ —Ä–∞–±–æ—á–∞—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!`, keyboard)
            return
        }
        console.log("Using %s URL for transaction", msg.text)
        bot.sendMessage(chatId, "‚ùì –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É? (–î–∞/–ù–µ—Ç)")
        urls[chatId] = msg.text

        chatState[chatId] = "COMPLETE_WAIT_YES_OR_NO"
    } else if (chatState[chatId] === "COMPLETE_WAIT_YES_OR_NO") {
        if (msg.text.toLowerCase() == "–¥–∞") {
            db.execute(`
                SELECT id, userBalance FROM users WHERE userId = ? 
            `, [msg.from.id], async (err, row) => {
                if (err) {
                    console.error(err)
                    return
                }
                if (!row) {
                    console.log("User not found with %d", userId)
                    return
                }
                await bot.sendMessage(chatId, `–í–∞—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–µ!`)
                db.execute(`
                    INSERT INTO transactions(name, url, user_id, price) VALUES (?, ?, ?, ?) RETURNING *; 
                `, ["Vivod_stdstv", urls[chatId], row.id, transfer_count[chatId] * 1.3], async (err, row) => {
                    if (err) {
                        console.error(err)
                        return
                    }
                    await sendURLToRabbitMq(urls[chatId], transfer_count[chatId], row.id)
                    chatState[chatId] = ""
                })
            })
        } else {
            const keyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
                                callback_data: "backToMenu"
                            }
                        ]
                    ]
                }
            }
            bot.sendMessage(chatId, "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω.", keyboard)
            chatState[chatId] = ""
            urls[chatId] = ""
            transfer_count[chatId] = ""
        }
    } else if (chatState[chatId] === "waitMoneyAmount") {
        if (msg.text === msg.text) {
            if (msg.text > 0) {
                const number = msg.text
                Dividednumber = Math.round(number / 1.9)
                chatState[chatId] = "waitMoneyAmount"
                const keyboardPayments = {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: "–°–±–µ—Ä–±–∞–Ω–∫", callback_data: "paySberbank"
                                }
                            ],
                            [
                                {
                                    text: "QIWI –∫–æ—à–µ–ª—å–µ–∫", callback_data: "payQIWI"
                                }
                            ]
                        ]
                    }
                }
                bot.sendMessage(chatId, `ü§ç –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ ${number} —Ä–æ–±—É–∫—Å–æ–≤\n–ö –æ–ø–ª–∞—Ç–µ: ${Dividednumber} —Ä—É–±–ª–µ–π\n‚òÅ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:`, keyboardPayments).then(chatState[chatId] = "lol")
                return Dividednumber
            } else {
                bot.sendMessage(chatId, "–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ —Å—É–º–º—É –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            }
        }
    } else if (chatState[chatId] === "vivodMoney") {
        if (msg.text === msg.text) {
            if (msg.text > 0) {
                let number = parseInt(msg.text)
                if (number === NaN) {
                    await bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≤–∏–¥–µ —Ü–∏—Ñ–µ—Ä!")
                    return
                }
                db.execute("SELECT userBalance FROM users WHERE userId = ?", [userId], async (err, row) => {
                    if (err) {
                        console.error(err)
                        return
                    }
                    if (!row) {
                        console.log("User not found with %d", userId)
                        return
                    }

                    if (row.userBalance - number < 0) {
                        bot.sendMessage(chatId, "üòû –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏", {
                            reply_markup: {
                                inline_keyboard: [
                                    [
                                        {
                                            text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
                                            callback_data: "backToMenu"
                                        }
                                    ]
                                ]
                            }
                        })
                        chatState[chatId] = ""
                        return
                    }

                    transfer_count[chatId] = number
                    // db.execute( 
                    //     `INSERT INTO transactions(name, url, user_id, price) VALUES (?, ?, ?, ?) RETURNING *`
                    // , "vivod_sredstv",)
                    chatState[chatId] = "URL_INPUT"
                    await bot.sendMessage(chatId, `‚òÅ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ ${transfer_count[chatId]} —Ä–æ–±—É–∫—Å–æ–≤.\nü§ç –ì–µ–π–º–ø–∞—Å—Å –¥–æ–ª–∂–µ–Ω —Å—Ç–æ–∏—Ç—å ${Math.round(transfer_count[chatId] * 1.43)}\nüòä –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥–µ–π–º–ø–∞—Å—Å:`)
                })
            } else {
                bot.sendMessage(chatId, "–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            }
        }
    } else if (chatState[chatId] === "linkwait") {
        if (isValidHttpUrl(url)) {
            const chatId = msg.chat.id;
            const url = msg.text
            bot.sendMessage(chatId, `–ë–æ—Ç –ø—Ä–∏–Ω—è–ª –≤–∞—à—É —Å—Å—ã–ª–∫—É! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –≤ –æ—á–µ—Ä–µ–¥–∏. –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ -> ${url}`);
        } else {
            const chatId = msg.chat.id;
            const Keyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: "–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É", callback_data: "otmenaPayment"
                            }
                        ]
                    ]
                }
            }
            bot.sendMessage(chatId, "–°—Å—ã–ª–∫–∞ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!", Keyboard)
        }
    } else if (chatState[chatId] === "gamepassCostCalculator") {
        const chatId = msg.chat.id;
        const text = msg.text;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —á–∏—Å–ª–æ–º
        if (isNaN(text)) {
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –í–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É –≤ –≤–∏–¥–µ –ß–ò–°–õ–ê!');
            return;
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ –∏ –≤—ã—á–∏—Å–ª—è–µ–º —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        const number = parseFloat(text);
        const increasedNumber = number * 1.43;

        bot.sendMessage(chatId, `‚úîÔ∏è –ì–µ–π–º–ø–∞—Å—Å –¥–æ–ª–∂–µ–Ω —Å—Ç–æ–∏—Ç—å: ${increasedNumber} —Ä–æ–±—É–∫—Å–æ–≤!`);
    } else if (chatState[chatId] === "robuxCostCalculator") {
        const chatId = msg.chat.id;
        const text = msg.text;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —á–∏—Å–ª–æ–º
        if (isNaN(text)) {
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.');
            return;
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ –∏ –≤—ã—á–∏—Å–ª—è–µ–º —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        const number = parseFloat(text);
        const increasedNumber = Math.round(number * 0.52631578947);

        bot.sendMessage(chatId, `‚úîÔ∏è –í—ã –¥–æ–ª–∂–Ω—ã –∑–∞–ø–ª–∞—Ç–∏—Ç—å ${increasedNumber} —Ä—É–±–ª–µ–π!`);
    } else if (chatState[chatId] === "robuxChanges") {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —á–∏—Å–ª–æ–º
        if (msg.text === msg.text) {
            const text = msg.text
            if (isNaN(text)) {
                bot.sendMessage(chatId, '–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.');
                return;
            }

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ –∏ –≤—ã—á–∏—Å–ª—è–µ–º —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            bot.sendMessage(chatId, `–Ω–∞–ª–∏—á–∏–µ —Ç–µ–ø–µ—Ä—å ${text} —Ä–æ–±—É–∫—Å–æ–≤`);
            chatState[chatId] = "pon"
            return numberRobuxes = text
        }
    }
})

bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const telegramUsername = msg.from.username;
    const userId = msg.from.id;
    const currentTime = new Date().toISOString();

    if (userId != "5339506080") {
        bot.sendMessage(chatId, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ –º–æ–µ–º –º–∞–≥–∞–∑–∏–Ω–µ —Ä–æ–±—É–∫—Å–æ–≤)\n–ù–∏–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –º–æ–µ –º–µ–Ω—é. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –í—ã–∑–≤–∞—Ç—å –º–µ–Ω—é", againMenu);
        bot.sendMessage(chatId, "–í–æ—Ç –º–æ–µ –º–µ–Ω—é:", Keyboard);

        db.get(`SELECT chatState FROM users WHERE userId = ?`, [userId], (err, row) => {
            if (err) {
                console.error(err.message);
                return;
            }
            let chatState = 'NormalUserState';
            if (row && row.chatState) {
                chatState = row.chatState;
            } else {
                db.execute(`INSERT INTO users (telegramUsername, userId, timeReg) VALUES (?, ?, ?)`, [telegramUsername, userId, currentTime], function (err) {
                    if (err) {
                        console.error(err.message);
                        return;
                    }
                    console.log(`User ${telegramUsername} (${userId}) inserted into the database.`);
                });
            }
        });
    } else {
        bot.sendMessage(5339506080, "–ë–æ—Ç –µ—â–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–Ω–æ–π –ø–æ–∑–∂–µ.")
        bot.sendMessage(809124390, "–î–∏–º–∞ –∑–∞—à–µ–ª –≤ –±–æ—Ç–∞, —Å—Ä–æ—á–Ω–æ —É—Å—Ç—Ä–∞–Ω—è–π –ø—Ä–æ–±–ª–µ–º—É")
    }
});

const Keyboard = {
    reply_markup: {
        inline_keyboard: [
            [
                {
                    text: "üë§ –ü—Ä–æ—Ñ–∏–ª—å üë§",
                    callback_data: "profile"
                }
            ],
            [
                {
                    text: "üõçÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
                    callback_data: "instruction"
                },
                {
                    text: "–ù–∞–ª–∏—á–∏–µ ü§ë",
                    callback_data: "proverkaRBX"
                }
            ],
            [
                {
                    text: "üí≥ –ö—É–ø–∏—Ç—å Robux",
                    callback_data: "buyRobux"
                },
                {
                    text: "–í—ã–≤–µ—Å—Ç–∏ Robux üéÅ",
                    callback_data: "giveaway"
                }
            ],
            [
                {
                    text: "üí∞ –ë–∞–ª–∞–Ω—Å",
                    callback_data: "balance"
                },
                {
                    text: '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä üßÆ',
                    callback_data: "calculator"
                }
            ],
            [
                {
                    text: "‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
                    callback_data: "helpAdmin"
                },
                {
                    text: "–ù–æ–≤–æ—Å—Ç–∏ üì¢",
                    callback_data: "newsChanel"
                }
            ]
        ]
    }
}
const againMenu = {
    reply_markup: {
        keyboard: [
            [{ text: '–í—ã–∑–≤–∞—Ç—å –º–µ–Ω—é' }]
        ],
        resize_keyboard: true,
        one_time_keyboard: false,
    }
}

// bot.onText(/\/transfer/, async (msg) => {
//     const chatId = msg.chat.id;

//     const userid = msg.from.id;

//     db.execute(`SELECT * FROM users WHERE userId = ?;`, [userid], async (err, row) => {
//         if (err) {
//             console.error(err)
//             return
//         }
//         if (row === null || row === undefined) {
//             console.log("User with tgid %d not found", userid)
//             await bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞!")
//             return
//         }

//         chatState[chatId] = "TRANSFER_INPUT"

//         await bot.sendMessage(chatId, "–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–±—É–∫—Å–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏?")
//     })
// })

bot.onText(/\/addbalance (\d+) (\d+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const adminUserId = msg.from.id;
    const targetUserId = parseInt(match[1]);
    const amount = parseInt(match[2]);
    if (isAdminUser(adminUserId)) {
        // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        increaseUserBalance(targetUserId, amount, (result) => {
            if (result.success) {
                bot.sendMessage(chatId, `–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${targetUserId} —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${amount}`);
            } else {
                bot.sendMessage(chatId, `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${targetUserId}`);
            }
        });
    } else {
        bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã");
    }
});
bot.onText(/\/minusbalance (\d+) (\d+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const adminUserId = msg.from.id;
    const targetUserId = parseInt(match[1]);
    const amount = parseInt(match[2]);
    if (isAdminUser(adminUserId)) {
        // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        minusUserBalance(targetUserId, amount, (result) => {
            if (result.success) {
                bot.sendMessage(chatId, `–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${targetUserId} —É—Å–ø–µ—à–Ω–æ –ø–æ–Ω–∏–∂–µ–Ω –Ω–∞ ${amount}`);
            } else {
                bot.sendMessage(chatId, `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω–∏–∑–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${targetUserId}`);
            }
        });
    } else {
        bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã");
    }
});
bot.onText(/\/blockuser (\d+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const adminUserId = msg.from.id;
    const targetUserId = parseInt(match[1]);
    if (isAdminUser(adminUserId)) {
        blockUser(targetUserId, (result) => {
            if (result.success) {
                bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${targetUserId} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
            } else {
                bot.sendMessage(chatId, `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${targetUserId}`);
            }
        });
    } else {
        bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã");
    }
});
bot.onText(/\/addToken (.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const token = match[1]; // –ó–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞, –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –≤ –∫–æ–º–∞–Ω–¥–µ

    // –í—Å—Ç–∞–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.execute('INSERT INTO user_tokens (token) VALUES (?)', [token], function (err, row) {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', err.message);
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            return;
        }

        console.log('–ó–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.');
        bot.sendMessage(chatId, '–ó–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.');
    });
});

function blockUser(userId, callback) {
    db.execute(
        `UPDATE users SET isBlocked = 1 WHERE userId = ?`,
        [userId],
        function (err) {
            if (err) {
                console.error(err.message);
                callback({ success: false });
            } else {
                callback({ success: true });
            }
        }
    );
}

function isAdminUser(userId) {
    const adminUserIds = [809124390,];
    return adminUserIds.includes(userId);
}

function increaseUserBalance(userId, amount, callback) {
    db.execute(
        `UPDATE users SET userBalance = userBalance + ? WHERE userId = ?`,
        [amount, userId],
        function (err) {
            if (err) {
                console.error(err.message);
                callback({ success: false });
            } else {
                callback({ success: true });
            }
        }
    );
}

function minusUserBalance(userId, amount, callback) {
    db.execute(
        `UPDATE users SET userBalance = userBalance + ? WHERE userId = ?`,
        [amount, userId],
        function (err) {
            if (err) {
                console.error(err.message);
                callback({ success: false });
            } else {
                callback({ success: true });
            }
        }
    );
}

bot.onText(/\/support/, (msg) => {
    const chatId = msg.chat.id;

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª—É–∂–±—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ö–∞–∫ –º—ã –º–æ–∂–µ–º –≤–∞–º –ø–æ–º–æ—á—å?');
});

function handleUserMessage(chatId, message) {
    // –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç –∏–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.

    // –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (message.toLowerCase().includes('–ø—Ä–æ–±–ª–µ–º–∞')) {
        d
        bot.sendMessage(chatId, '–ö–∞–∂–µ—Ç—Å—è, —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–º–æ—á—å –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',);
    } else if (message.toLowerCase().includes('–≤–æ–ø—Ä–æ—Å')) {
        bot.sendMessage(chatId, '–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å, —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏–º.');
    } else {
    }
}

bot.on('polling_error', (error) => {
    console.log(error);
});

bot.onText(/\/lenalox/, (msg, match) => {
    const chatId = msg.chat.id;
    console.log(chatId)
});

bot.onText(/\/lenamagic/, (msg) => {
    const chatId = msg.chat.id;
    chatState[chatId] = "robuxChanges"
    bot.sendMessage(chatId, "–ù–∞–ø–∏—à–∏ —Å—É–º–º—É –Ω–∞–ª–∏—á–∏—è –±–æ—Ç–∏—Ö–∞")
})

bot.onText(/\/proverka/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, `–ù–∞–ª–∏—á–∏–µ: ${numberRobuxes} —Ä–æ–±—É–∫—Å–æ–≤`)
})

