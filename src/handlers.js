import { STATUSCODES } from "./consts.js"
import { getKeys } from "./helpers.js"
import { TransactionRepository } from "./repos.js"

export function TgOnMessageHandler(bot) {
    return async (body) => {
        try {
            let data = JSON.parse(body.content.toString())
            console.log(data + " Content")

            console.log(`Validation return data: ${data}`)

            // validateReturnData(content)

            let status_code_info = STATUSCODES[data.status_code]
            let tx_id = data.tx_id

            let ins = TransactionRepository.getInstance()
            console.log(`Transaction id: ${tx_id}, Keys ${getKeys(data)}`)
            ins.getByID(tx_id, async (err, tx) => {
                if (err) {
                    console.error(err)
                    return
                }
                if (tx === null || tx === undefined) {
                    console.error("Cannot pull transaction id")
                    return
                }
                console.log("WHATAFAK")
                ins.getUserByTransaction(tx_id, async (err, user) => {
                    if (err) {
                        console.error(err)
                        return
                    }
                    if (user === null || user === undefined) {
                        console.error("Can't pull users with transaction ids;")
                        return
                    }
                    const Keyboard = {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    {
                                        text: "üë§ –¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞ üë§",
                                        callback_data: "helpAdmin"
                                    }
                                ]
                            ]
                        }
                    }
                    if (data.status_code == 200) { 
                        await ins.acceptIt(tx_id, user.userId, (err, row) => {console.log(`TRANSACTION COMPLETED, for ${user.userId}, TX_ID: ${tx_id}`)})
                    }
                    await bot.sendMessage(user.userId, `‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –±—ã–ª–∞ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–∞, –≤–æ—Ç –µ–µ –≤—ã–≤–æ–¥: \n ${status_code_info}`, Keyboard)
                })
            })

            return true

        } catch (err) {
            console.error(err)
        }
    }
}

export async function startHandler(bot) {
    return async (msg) => {
        const chatId = msg.chat.id;
        const telegramUsername = msg.from.username;
        const userId = msg.from.id;
        const currentTime = new Date().toISOString();

        bot.sendMessage(chatId, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ –º–æ–µ–º –º–∞–≥–∞–∑–∏–Ω–µ —Ä–æ–±—É–∫—Å–æ–≤)\n–ù–∏–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –º–æ–µ –º–µ–Ω—é. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –í—ã–∑–≤–∞—Ç—å –º–µ–Ω—é", againMenu);
        bot.sendMessage(chatId, "–í–æ—Ç –º–æ–µ –º–µ–Ω—é:", Keyboard);

        db.get(`SELECT chatState FROM users WHERE tg_id = ?`, [userId], (err, row) => {
            if (err) {
                console.error(err.message);
                return;
            }
            let chatState = 'NormalUserState';
            if (row && row.chatState) {
                chatState = row.chatState;
            } else {
                db.run(`INSERT INTO users (telegramUsername, userId, timeReg) VALUES (?, ?, ?)`, [telegramUsername, userId, currentTime], function (err) {
                    if (err) {
                        console.error(err.message);
                        return;
                    }
                    console.log(`User ${telegramUsername} (${userId}) inserted into the database.`);
                });
            }
        });
    }
}

export function addBalance(bot) {
    return async (msg, match) => {
        const chatId = msg.chat.id;
        const adminUserId = msg.from.id;
        const targetUserId = parseInt(match[1]);
        const amount = parseInt(match[2]);
        if (isAdminUser(adminUserId)) {
            // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            increaseUserBalance(targetUserId, amount, (result) => {
                if (result.success) {
                    bot.sendMessage(chatId, `–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${targetUserId} —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${amount}`);
                } else {
                    bot.sendMessage(chatId, `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${targetUserId}`);
                }
            });
        } else {
            bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã");
        }
    }
}

export function minusBalance(bot) {
    return (msg, match) => {
        const chatId = msg.chat.id;
        const adminUserId = msg.from.id;
        const targetUserId = parseInt(match[1]);
        const amount = parseInt(match[2]);
        if (isAdminUser(adminUserId)) {
            // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            minusUserBalance(targetUserId, amount, (result) => {
                if (result.success) {
                    bot.sendMessage(chatId, `–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${targetUserId} —É—Å–ø–µ—à–Ω–æ –ø–æ–Ω–∏–∂–µ–Ω –Ω–∞ ${amount}`);
                } else {
                    bot.sendMessage(chatId, `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω–∏–∑–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${targetUserId}`);
                }
            });
        } else {
            bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã");
        }
    }
}

export function blockUserHandler(bot) {
    return async (msg, match) => {
        const chatId = msg.chat.id;
        const adminUserId = msg.from.id;
        const targetUserId = parseInt(match[1]);
        if (isAdminUser(adminUserId)) {
            blockUser(targetUserId, (result) => {
                if (result.success) {
                    bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${targetUserId} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
                } else {
                    bot.sendMessage(chatId, `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${targetUserId}`);
                }
            });
        } else {
            bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã");
        }
    }
}
